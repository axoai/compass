swagger: '2.0'
info:
  title: Compass
  description: Configuration Management API
  version: "0.1.0"
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
  - application/problem+json
paths:
  /relations:
    get:
      summary: List all relations
      description: |
        Retrieves the complete list of all relations currently available for use. A relation specifies how the values
        of a dimension are matched when being queried. Useful relations would be *equality*, *greater-than*, *less-
        than* and so forth.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Relations'
  /dimensions:
    get:
      summary: List all dimensions
      description: |
        Retrieves the complete list of all dimensions currently defined. This is usually used for display purposes.
        Dimensions are sorted by priority in descending order.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Dimensions'
    put:
      summary: Re-order all dimensions
      description: |
        Dimensions have one strict global ordering, i.e. every dimension is comparable to any other.
        To change the priority one needs to update all dimensions with an explicit ordering. Clients are free to use
        this for any kind of specific operation on top, e.g. swapping two dimensions, rotating or moving one dimension
        up or down the list.
      parameters:
        - name: dimensions
          in: body
          schema:
            $ref: '#/definitions/Dimensions'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Dimensions'
  /dimensions/{dimension}:
    get:
      summary: View a dimension
      parameters:
        - $ref: '#/parameters/DimensionId'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Dimension'
    put:
      summary: Create or update a dimension
      description: |
        Creating a new dimension will put it at the end of the priority list, i.e. it will have the lowest priority.
      parameters:
        - $ref: '#/parameters/DimensionId'
        - name: dimension
          in: body
          schema:
            $ref: '#/definitions/Dimension'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Dimension'
        201:
          description: Created
          schema:
            $ref: '#/definitions/Dimension'
    delete:
      summary: Delete a dimension
      description: This requires that the dimension is **not used by any key**.
      parameters:
        - $ref: '#/parameters/DimensionId'
      responses:
        204:
          description: No Content
  /keys:
    get:
      summary: List all keys
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Keys'
  /keys/{key}:
    get:
      summary: View a key
      parameters:
        - $ref: '#/parameters/Key'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Key'
    put:
      summary: Create or update a key
      parameters:
        - $ref: '#/parameters/Key'
        - name: key
          in: body
          schema:
            $ref: '#/definitions/Key'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Key'
        201:
          description: Created
          schema:
            $ref: '#/definitions/Key'
    delete:
      summary: Delete a key
      description: Deletes this key and **all** (!) of its values.
      parameters:
        - $ref: '#/parameters/Key'
      responses:
        204:
          description: No Content
  /keys/{key}/value:
    get:
      summary: Best matching value for a given key and context
      parameters:
        - $ref: '#/parameters/Key'
        - $ref: '#/parameters/Filter'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Value'
  /keys/{key}/values:
    get:
      summary: List values for a given key and context
      parameters:
        - $ref: '#/parameters/Key'
        - $ref: '#/parameters/Filter'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Values'
    post:
      summary: Add or replaces values to a given key
      parameters:
        - $ref: '#/parameters/Key'
        - $ref: '#/parameters/Filter'
        - $ref: '#/parameters/Value'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Values'
    delete:
      summary: Delete selected values
      parameters:
        - $ref: '#/parameters/Key'
        - $ref: '#/parameters/Filter'
      responses:
        204:
          description: No Content
parameters:
  DimensionId:
    name: dimension
    in: path
    type:
      $ref: '#/definitions/DimensionId'
    required: true
  Key:
    name: key
    in: path
    type:
      $ref: '#/definitions/KeyId'
    required: true
  Values:
    name: values
    in: body
    schema:
      $ref: '#/definitions/Values'
  Value:
    name: value
    in: body
    schema:
      $ref: '#/definitions/Value'
  Filter:
    name: '*'
    description: |
      Any number of filter query parameters based on the dimension of the values. This allows the following use cases:

      1. `GET /keys/tax-rate/values?country`, all tax rates with a country
      2. `GET /keys/tax-rate/values?country=DE`, all tax rates for Germany
      3. `GET /keys/tax-rate/values?country=DE&after=2015-09-07T16:00:00`, all tax rates for Germany that are valid after *2015-09-07T16:00:00*
      4. `GET /keys/tax-rate/values?country=DE&country=AT`, all tax rates for Germany and Austria
    in: query
    type: array
    items:
      type: string
    collectionFormat: multi
    allowEmptyValue: true
definitions:
  Problem:
    $ref: 'https://zalando.github.io/problem/schema.yaml#/Problem'
  Relations:
    type: object
    properties:
      relations:
        type: array
        items:
          $ref: '#/definitions/Relation'
    required:
      - relations
  Relation:
    type: object
    properties:
      id:
        descrition: The unique identifier for this relation.
        type: string
        example: =
      title:
        description: The readable name for this relation
        type: string
        example: equality
      description:
        type: string
        description: |
          A description of this relation that should define what characteristics is has in terms of matching values.
    required:
      - id
      - title
      - description
  ID:
    type: string
    pattern: '^([a-z0-9]+(-[a-z0-9]+)*)(\.([a-z0-9]+(-[a-z0-9]+)*))*$'
    example: country
  Dimensions:
    type: object
    properties:
      dimensions:
        type: array
        items:
          $ref: '#/definitions/Dimension'
    required:
      - dimensions
  Dimension:
    type: object
    properties:
      id:
        description: The unique identifier for this dimension.
        $ref: '#/definitions/ID'
        readOnly: true
        example: country
      schema:
        description: The schema that applies to all values of this dimension across all values.
        $ref: 'http://json-schema.org/schema#'
        example:
          type: string
      relation:
        description: |
          The underlying operator that is used to apply any matching and ordering semantics. For a complete list of
          available relations, use `GET /relations`.
        type: string
        example: =
      description:
        type: string
        description: |
          A description of this key that should define what the dimension is about and what possible values it can have.
          Alternatively this can be a URL to an accessible web page.
        example: ISO 3166-1 alpha-2 country code, see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements
    required:
      - schema
      - relation
      - description
  Keys:
    type: object
    properties:
      keys:
        type: array
        items:
          $ref: '#/definitions/Key'
    required:
      - keys
  Key:
    type: object
    properties:
      id:
        description: The unique identifier for this key. It can be namespaced.
        $ref: '#/definitions/ID'
        readOnly: true
        example: tax-rate
      schema:
        description: The schema that applies to all values of this key.
        $ref: 'http://json-schema.org/schema#'
      description:
        type: string
        description: |
          A description of this key that should define what the key is about. Alternatively this can be a 
          URL to an accessible web page.
        example: Tax rate as a factor in the range [0,1].
    required:
      - schema
      - description
  Values:
    type: object
    properties:
      values:
        type: array
        items:
          $ref: '#/definitions/Value'
  Value:
    properties:
      dimensions:
        type: object
        # keys are dimension identifiers
        # values are typed according to the dimension's schema
        additionalProperties: true
        example:
          country: DE
          after: 2017-01-01T00:00:00
        default: {}
      value:
        description: |
          Actual value for this key and its dimensions. This may be of any type, i.e. everything from primitive values like boolean and integers to complex
          structures is possible. Although complex objects can usually be flattened with the use of custom dimensions very efficiently.
        example: 0.2
    required:
      - value
    example:
      dimensions:
        country: DE
        after: 2017-01-01T00:00:00
      value: 0.2