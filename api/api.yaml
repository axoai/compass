openapi: '3.0.2'
info:
  title: Compass - Configuration Management API
  description: |
    Compass is a configuration service with a multi-dimensional key space. Every value is identified by at exactly one
    key and an arbitrary number of additional dimensions. As an example it would allow to define a key `tax-rate` and
    specify different values per country (dimension) as well as before (time dimension):

    | Key      | Country | Before                    | Value |
    |----------|---------|---------------------------|-------|
    | tax-rate | DE      | 2007-01-01T00:00:00+01:00 | 0.16  |
    | tax-rate | DE      |                           | 0.19  |
    | tax-rate | AT      |                           | 0.20  |
    | tax-rate | CH      |                           | 0.08  |

    Different dimension may influence how values are queried. The `country` dimension is matched based on equality (`=`)
    while the `before` dimension is based on inequality or to be more precise less than (`<`). That property is called
    relation and they can't be created using this API - in contrast to keys and dimensions.

    Keys can impose certain type restrictions on their values by defining a JSON schema. The same applies to dimensions
    and their values.
  version: "0.1.0"
tags:
  - name: relations
  - name: dimensions
  - name: keys
  - name: values
  - name: value
  - name: history
paths:
  /relations:
    get:
      tags: [relations]
      summary: Read all relations
      description: |
        Read the complete list of all relations available at this point in time. A relation specifies how the values
        of a dimension are matched when being queried. Useful relations would be equality (=), greater-than (>),
        less-than (<) and so forth.
      responses:
        200:
          description: OK
          content: 
            application/json: 
              schema:
                $ref: '#/components/schemas/RelationCollection'
  /relations/{relation}:
    get:
      tags: [relations]
      summary: Read a single relation.
      parameters:
        - name: relation
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Relation'
  /dimensions:
    get:
      tags: [dimensions]
      summary: Read all dimensions and optionally filter by search term
      parameters:
        - name: q
          description: Search term
          in: query
          schema:
            type: string
        - $ref: '#/components/parameters/Limit'
      description: |
        Read the complete list of all dimensions currently defined. This is intended to be used for display purposes.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DimensionCollection'
  /dimensions/revisions:
    get:
      tags: [history]
      summary: Read revisions of all dimensions
      description: "" # TODO
      parameters:
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionCollection'

  /dimensions/revisions/{revision}:
    get:
      tags: [history]
      summary: Read historic version of all dimensions and optionally filter by search term
      parameters:
        - $ref: '#/components/parameters/Revision'
        - name: q
          description: Search term
          in: query
          schema:
            type: string
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionedDimensionCollection'
  /dimensions/{dimension}:
    put:
      tags: [dimensions]
      summary: Replace a dimension
      description: |
        Either create a new dimension or update an existing one.

        A modification to an existing dimension's schema requires that all values that are using this dimension
        successfully validate against it. A violation of this rule will result in a rejected update.

        Since dimenions are used as query parameters when reading values there are certain reserved names that are not
        allowed.
      parameters:
        - $ref: '#/components/parameters/Dimension'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dimension' 
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dimension'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dimension'
    get:
      tags: [dimensions]
      summary: Read a dimension
      parameters:
        - $ref: '#/components/parameters/Dimension'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dimension'
    patch:
      tags: [dimensions]
      summary: Update a dimension
      parameters:
        - $ref: '#/components/parameters/Dimension'
      requestBody:
        content:
          application/json:
            schema: # TODO
              type: object
              additionalProperties: true
          application/merge-patch+json:
            schema: # TODO
              type: object
              additionalProperties: true
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/JsonPatch'
      responses:
        200:
          description: OK
          content: 
            application/json: 
              schema:
                $ref: '#/components/schemas/Dimension'
    delete:
      tags: [dimensions]
      summary: Delete a dimension
      description: Deleting a dimension that is still referenced by a value is not supported and will be rejected.
      parameters:
        - $ref: '#/components/parameters/Dimension'
      responses:
        204:
          description: No Content
  /dimensions/{dimension}/revisions:
    get:
      tags: [history]
      parameters:
        - $ref: '#/components/parameters/Dimension'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionCollection'
  /dimensions/{dimension}/revisions/{revision}:
    get:
      tags: [history]
      parameters:
        - $ref: '#/components/parameters/Dimension'
        - $ref: '#/components/parameters/Revision'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionedDimension'
  /keys:
    get:
      tags: [keys]
      summary: Read all keys and optionally filter by search term
      parameters:
        - name: q
          description: Search term
          in: query
          schema:
            type: string
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyCollection'
  /keys/revisions:
    get:
      tags: [history]
      parameters:
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionCollection'
  /keys/revisions/{revision}:
    get:
      tags: [history]
      parameters:
        - $ref: '#/components/parameters/Revision'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionedKeyCollection'
  /keys/{key}:
    put:
      tags: [keys]
      summary: Replace a key
      description: |
        Either create a new key or update an existing one.

        A modification to an existing key's schema requires that all values of this key successfully validate against
        it. A violation of this rule will result in a rejected update.
      parameters:
        - $ref: '#/components/parameters/Key'
      requestBody:
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/Key'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
    get:
      tags: [keys]
      summary: Read a key
      parameters:
        - $ref: '#/components/parameters/Key'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
    patch:
      tags: [keys]
      summary: Update a key
      parameters:
        - $ref: '#/components/parameters/Key'
      requestBody:
        content:
          application/json:
            schema: # TODO
              type: object
              additionalProperties: true
          application/merge-patch+json:
            schema: # TODO
              type: object
              additionalProperties: true
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/JsonPatch'
            
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
    delete:
      tags: [keys]
      summary: Delete a key
      description: Deleting a key will delete all of its values.
      parameters:
        - $ref: '#/components/parameters/Key'
      responses:
        204:
          description: No Content
  /keys/{key}/revisions:
    get:
      tags: [history]
      parameters:
        - $ref: '#/components/parameters/Key'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionCollection'
  /keys/{key}/revisions/{revision}:
    get:
      tags: [history]
      parameters:
        - $ref: '#/components/parameters/Key'
        - $ref: '#/components/parameters/Revision'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionedKey'
  /keys/{key}/values:
    put:
      tags: [values]
      summary: Replace all values for the given key.
      description: |
        If any value violates this key's schema or any dimensions values are violating their respective dimension's
        schema then the whole update will be rejected.
      parameters:
        - $ref: '#/components/parameters/Key'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValueCollection'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValueCollection'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValueCollection'
    get:
      tags: [values]
      summary: Read values for the given key and optional dimensions.
      description: |
        Values can either be read as a whole or being filtered by dimensions:

        - `GET /keys/tax-rate/values`, all tax rates
        - `GET /keys/tax-rate/values?country=DE`, all tax rates for Germany
        - `GET /keys/tax-rate/values?country=DE&after=2015-09-07T16:00:00`, all tax rates for Germany that are valid after 2015-09-07T16:00:00

        Values are always returned in insertion order. Ordering can be changed by replacing all values.
      parameters:
        - $ref: '#/components/parameters/Key'
        - $ref: '#/components/parameters/Filter'
        # TODO limit + pagination?!
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValueCollection'
    patch:
      tags: [values]
      summary: Update values for the given key.
      parameters:
        - $ref: '#/components/parameters/Key'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonPatch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/JsonPatch'
      responses:
        200:
          description: OK
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ValueCollection'
  /keys/{key}/values/revisions:
    get:
      tags: [history]
      parameters:
        - $ref: '#/components/parameters/Key'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionCollection'
  /keys/{key}/values/revisions/{revision}:
    get:
      tags: [history]
      parameters:
        - $ref: '#/components/parameters/Key'
        - $ref: '#/components/parameters/Revision'
        # TODO limit + pagination?
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionedValueCollection'
  /keys/{key}/value:
    put:
      tags: [value]
      summary: Replace value of the given key
      description: |
        Replaces a value that is unambiguously identified by the given key and dimensions. In contrast to reading a
        value this endpoint does not select the best match but rather requires an exact match.

        Replacing a value with country: DE and after: 2015-09-07T16:17:21 will NOT replace a value that is configured
        with the after: 2015-09-07T16:00:00, but rather create a new one.
        Replacing country: DE and after: 2015-09-07T16:00:00 on the other would update it.

        As a general statement: Reading is (or can be) fuzzy, but updates and deletes are not.
      parameters:
        - $ref: '#/components/parameters/Key'
        - $ref: '#/components/parameters/Filter'
      requestBody:
        description: If dimensions are present in the body they have to match the query parameters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Value'
      responses:
        200:
          description: OK
          headers:
            Location:
              description: Canonical URL of this value
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Value'
        201:
          description: OK
          headers:
            Location:
              description: Canonical URL of this value
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Value'
    get:
      tags: [value]
      summary: Read a value of the given key and optional dimensions
      description: |
        Reads the best matching value for the given key and dimensions:

        - `GET /keys/tax-rate/value`, tax rate that applies to all country (probably none, so `404 Not Found`)
        - `GET /keys/tax-rate/value?country=DE`, tax rate for Germany
        - `GET /keys/tax-rate/value?country=DE&after=2015-09-07T16:00:00`, tax rate for Germany that is valid after 2015-09-07T16:00:00

        Values have an explicit ordering that can be changed by replacing all values. Selecting the best value for
        a given key and selected dimensions is based on that order. The first match will be returned. That implies
        that values should be ordered from fine- to coarse-grained or from specific to generic.
      parameters:
        - $ref: '#/components/parameters/Key'
        - $ref: '#/components/parameters/Filter'
      responses:
        200:
          description: OK
          headers:
            Content-Location:
              description: Canonical URL of this value
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Value'
    patch:
      tags: [value]
      summary: Update a value
      parameters:
        - $ref: '#/components/parameters/Key'
        - $ref: '#/components/parameters/Filter'
      requestBody:
        content:
          application/json:
            schema: # TODO
              type: object
              additionalProperties: true
          application/merge-patch+json:
            schema: # TODO
              type: object
              additionalProperties: true
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/JsonPatch'
      responses:
        200:
          description: OK
          headers:
            Content-Location:
              description: Canonical URL of this value
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Value'
    delete:
      tags: [value]
      summary: Delete a value
      description: |
        Deletes a value that is unambiguously identified by the given key and dimensions. In contrast to reading a
        value this endpoint does not select the best match but rather requires an exact match.

        `DELETE /keys/tax-rate/value?country=DE&after=2015-09-07T16:17:21` will NOT delete a value that is configured
        with the `after=2015-09-07T16:00:00`, but `DELETE /keys/tax-rate/value?country=DE&after=2015-09-07T16:00:00`
        would.

        As a general statement: Reading is (or can be) fuzzy, but updates and deletes are not.
      parameters:
        - $ref: '#/components/parameters/Key'
        - $ref: '#/components/parameters/Filter'
      responses:
        204:
          description: No Content
  /keys/{key}/value/revisions:
    get:
      tags: [history]
      parameters:
        - $ref: '#/components/parameters/Key'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionCollection'
  /keys/{key}/value/revisions/{revision}:
    get:
      tags: [history]
      parameters:
        - $ref: '#/components/parameters/Key'
        - $ref: '#/components/parameters/Revision'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionedValue'
components:
  parameters:
    Dimension:
      name: dimension
      in: path
      schema:
        $ref: '#/components/schemas/ID'
      required: true
    Key:
      name: key
      in: path
      schema:
        $ref: '#/components/schemas/ID'
      required: true
    Revision:
      name: revision
      in: path
      schema:
        type: integer
        format: int64
      required: true
    Filter:
      name: '' # we have to specify a name here even though we support any and many of them.
      description: |
        A dynamic number of dimensions, e.g. `country=AT&after=2015-09-07T16:00:00`. The values have to match the schema
        specified by their corresponding dimension. The correct JSON type is deducted based on "appearance" of the value,
        e.g. if a value looks like a boolean it will be parsed as one. In order to prevent incorrect typing, e.g.
        the value `true` should be parsed as a string, it needs to be wrapped in double quotes, `"true"`.
      in: query
      schema:
        type: array
        items: {}
      style: form
      explode: true
    Limit:
      name: limit
      in: query
      schema:
        type: integer
        format: int32
        default: 25
        minimum: 0
        maximum: 100
  schemas:
    ID:
      type: string
      allOf:
        - type: string
          pattern: '^([a-z0-9]+(-[a-z0-9]+)*)([.]([a-z0-9]+(-[a-z0-9]+)*))*$'
        - not:
            type: string
            enum:
              - cursor
              - embed
              - fields
              - filter
              - key
              - limit
              - offset
              - q
              - query
              - revision
              - revisions
              - sort
    Page:
      type: object
      properties:
        next:
          type: string
          format: uri
        prev:
          type: string
          format: uri
    RelationCollection:
      type: object
      properties:
        relations:
          type: array
          items:
            $ref: '#/components/schemas/Relation'
      required:
        - relations
    Relation:
      type: object
      properties:
        id:
          description: The unique identifier for this relation.
          type: string
          minLength: 1
          example: =
        title:
          description: The readable name for this relation
          type: string
          minLength: 1
          example: equality
        description:
          description: |
            A description of this relation that should define what characteristics is has in terms of matching values.
          type: string
          minLength: 1
      required:
        - id
        - title
        - description
    DimensionCollection:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            dimensions:
              type: array
              items:
                $ref: '#/components/schemas/Dimension'
          required:
            - dimensions
    Dimension:
      type: object
      properties:
        id:
          description: The unique identifier for this dimension.
          type: string
          readOnly: true
          example: country
        schema:
          $ref: '#/components/schemas/JsonSchema'
        relation:
          description: |
            The underlying operator that is used to apply any matching and ordering semantics. For a complete list of
            available relations, use `GET /relations`.
          type: string
          example: =
        description:
          description: |
            A description of this key that should define what the dimension is about and what possible values it can have.
            Alternatively this can be a URL to an accessible web page.
          type: string
          minLength: 1
          example: ISO 3166-1 alpha-2 country code, see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements
      required:
        - schema
        - relation
        - description
    KeyCollection:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            keys:
              type: array
              items:
                $ref: '#/components/schemas/Key'
          required:
            - keys
    Key:
      type: object
      properties:
        id:
          description: The unique identifier for this key. It can be namespaced.
          type: string
          readOnly: true
          example: tax-rate
        schema:
          $ref: '#/components/schemas/JsonSchema'
        description:
          type: string
          description: |
            A description of this key that should define what the key is about. Alternatively this can be a 
            URL to an accessible web page.
          minLength: 1
          example: Tax rate as a factor in the range [0,1].
      required:
        - schema
        - description
    ValueCollection:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/Value'
          required:
            - values
    Value:
      type: object
      properties:
        dimensions:
          type: object
          # keys are dimension identifiers
          # values are typed according to the dimension's schema
          additionalProperties: true
          readOnly: true
          example:
            country: DE
            after: 2017-01-01T00:00:00
        value:
          description: |
            Actual value for this key and its dimensions. This may be of any type, i.e. everything from primitive values like boolean and integers to complex
            structures is possible. Although complex objects can usually be flattened with the use of custom dimensions very efficiently.
          example: 0.2
      required:
        - value
      example:
        dimensions:
          country: DE
          after: 2017-01-01T00:00:00
        value: 0.2
    RevisionCollection:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            revisions:
              type: array
              items:
                $ref: '#/components/schemas/Revision'
          required:
            - revisions
    Revision:
      type: object
      properties:
        id:
          type: integer
          format: int64
        timestamp:
          type: string
          format: date-time
        href:
          type: string
          format: uri
        type:
          type: string
          enum: [create, update, delete]
        user:
          type: string
        comment:
          type: string
      required:
        - id
        - timestamp
        # TODO - href
        - type
        - user
    Revisioned:
      type: object
      properties:
        revision:
          $ref: '#/components/schemas/Revision'
      required:
        - revision
    RevisionedDimensionCollection:
      allOf:
        - $ref: '#/components/schemas/Revisioned'
        - $ref: '#/components/schemas/DimensionCollection'
    RevisionedDimension:
      allOf:
        - $ref: '#/components/schemas/Revisioned'
        - $ref: '#/components/schemas/Dimension'
    RevisionedKeyCollection:
      allOf:
        - $ref: '#/components/schemas/Revisioned'
        - $ref: '#/components/schemas/KeyCollection'
    RevisionedKey:
      allOf:
        - $ref: '#/components/schemas/Revisioned'
        - $ref: '#/components/schemas/Key'
    RevisionedValueCollection:
      allOf:
        - $ref: '#/components/schemas/Revisioned'
        - $ref: '#/components/schemas/ValueCollection'
    RevisionedValue:
      allOf:
        - $ref: '#/components/schemas/Revisioned'
        - $ref: '#/components/schemas/Value'
    JsonSchema:
      $ref: 'resource:/api/json-schema.json'
    JsonPatch:
      $ref: 'resource:/api/json-patch.json'
