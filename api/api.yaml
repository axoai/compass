swagger: '2.0'
info:
  title: Compass Configuration Management API
  # TODO description
  description: |
    ...
  version: "0.1.0"
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
  - application/problem+json
paths:
  /relations:
    get:
      summary: Read all relations
      description: |
        Read the complete list of all relations available at this point in time. A relation specifies how the values
        of a dimension are matched when being queried. Useful relations would be equality (=), greater-than (>),
        less-than (<) and so forth.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/RelationPage'
  /relations/{relation}:
    get:
      summary: Read a single relation.
      parameters:
        - $ref: '#/parameters/RelationId'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Relation'
  /dimensions:
    get:
      summary: Read all dimensions
      description: |
        Read the complete list of all dimensions currently defined. This is intended to be used for display purposes.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/DimensionPage'
  /dimensions/{dimension}:
    put:
      summary: Replace a dimension
      description: |
        Either create a new dimension or update an existing one.

        A modification to an existing dimension's schema requires that all values that are using this dimension
        successfully validate against it. A violation of this rule will result in a rejected update.
      parameters:
        - $ref: '#/parameters/DimensionId'
        - name: dimension
          in: body
          schema:
            $ref: '#/definitions/Dimension'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Dimension'
        201:
          description: Created
          schema:
            $ref: '#/definitions/Dimension'
    get:
      summary: Read a dimension
      parameters:
        - $ref: '#/parameters/DimensionId'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Dimension'
    delete:
      summary: Delete a dimension
      description: Deleting a dimension that is still referenced by a value is not supported and will be rejected.
      parameters:
        - $ref: '#/parameters/DimensionId'
      responses:
        204:
          description: No Content
  /keys:
    get:
      summary: Read all keys
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/KeyPage'
  /keys/{key}:
    put:
      summary: Replace a key
      description: |
        Either create a new key or update an existing one.

        A modification to an existing key's schema requires that all values of this key successfully validate against
        it. A violation of this rule will result in a rejected update.
      parameters:
        - $ref: '#/parameters/Key'
        - name: key
          in: body
          schema:
            $ref: '#/definitions/Key'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Key'
        201:
          description: Created
          schema:
            $ref: '#/definitions/Key'
    get:
      summary: Read a key
      parameters:
        - $ref: '#/parameters/Key'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Key'
    delete:
      summary: Delete a key
      description: Deleting a key will delete all of its values.
      parameters:
        - $ref: '#/parameters/Key'
      responses:
        204:
          description: No Content
  /keys/{key}/values:
    put:
      summary: Replace all values for the given key
      parameters:
        - $ref: '#/parameters/Key'
        - name: values
          in: body
          required: true
          schema:
            $ref: '#/definitions/ValuePage'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ValuePage'
    post:
      summary: Add a value for the given key
      parameters:
        - $ref: '#/parameters/Key'
        - $ref: '#/parameters/Value'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ValuePage'
        201:
          description: Created
          schema:
            $ref: '#/definitions/ValuePage'
    get:
      summary: Read values for the given key and optional dimension
      description: |

        - `GET /keys/tax-rate/values?country=DE`, all tax rates for Germany
        - `GET /keys/tax-rate/values?country=DE&after=2015-09-07T16:00:00`, all tax rates for Germany that are valid after 2015-09-07T16:00:00
      parameters:
        - $ref: '#/parameters/Key'
        - $ref: '#/parameters/Filter'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ValuePage'
  /keys/{key}/value:
    # TODO put? (with Filter being a concrete match?)
    get:
      summary: Read a value of the given key and optional dimensions
      description: |
        This endpoint is a convenience operation and equivalent to `GET /keys/{key}/values` with the same parameters
        and using the very first value.
      parameters:
        - $ref: '#/parameters/Key'
        - $ref: '#/parameters/Filter'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Value'
    delete:
      summary: Delete a value
      parameters:
        - $ref: '#/parameters/Key'
        - $ref: '#/parameters/Filter' # TODO concrete match
      responses:
        204:
          description: No Content
  /values:
    get:
      summary: Read all values for a given key pattern and context
      parameters:
        - $ref: '#/parameters/Query' # for keys
      responses:
        200:
          description: OK
          schema:
            type: object
            additionalProperties:
              type: array
              items:
                $ref: '#/definitions/Value'
            example:
              active:
                - dimensions:
                    email: '.*@qa-example.com'
                    value: true
                - dimensions:
                  value: false
              tax-rate:
                - dimension:
                    country: DE
                  value: 0.19
                - dimension:
                    country: CH
                  value: 0.08
parameters:
  RelationId:
    name: relation
    in: path
    type: string
    required: true
  DimensionId:
    name: dimension
    in: path
    type: string
    required: true
  Key:
    name: key
    in: path
    type: string
    required: true
  Values:
    name: values
    in: body
    schema:
      $ref: '#/definitions/ValuePage'
  Value:
    name: value
    in: body
    schema:
      $ref: '#/definitions/Value'
  Filter:
    name: '*'
    description: |
      Any number of filter query parameters based on the dimension of the values. This allows the following use cases:

      1. `GET /keys/tax-rate/values?country=DE`, all tax rates for Germany
      2. `GET /keys/tax-rate/values?country=DE&after=2015-09-07T16:00:00`, all tax rates for Germany that are valid after 2015-09-07T16:00:00
    in: query
    type: string
  Query:
    name: q
    description: User input query string
    in: query
    type: string
definitions:
  RelationPage:
    type: object
    properties:
      relations:
        type: array
        items:
          $ref: '#/definitions/Relation'
    required:
      - relations
  Relation:
    type: object
    properties:
      id:
        description: The unique identifier for this relation.
        type: string
        minLength: 1
        example: =
      title:
        description: The readable name for this relation
        type: string
        minLength: 1
        example: equality
      description:
        description: |
          A description of this relation that should define what characteristics is has in terms of matching values.
        type: string
        minLength: 1
    required:
      - id
      - title
      - description
  ID:
    type: string
    pattern: '^([a-z0-9]+(-[a-z0-9]+)*)(\.([a-z0-9]+(-[a-z0-9]+)*))*$'
    example: country
  DimensionPage:
    type: object
    properties:
      dimensions:
        type: array
        items:
          $ref: '#/definitions/Dimension'
    required:
      - dimensions
  Dimension:
    type: object
    properties:
      id:
        description: The unique identifier for this dimension.
        $ref: '#/definitions/ID'
        readOnly: true
        example: country
      schema:
        description: The schema that applies to all values of this dimension across all values.
        $ref: 'http://json-schema.org/schema#'
        example:
          type: string
          pattern: '^[A-Z]{2}$'
      relation:
        description: |
          The underlying operator that is used to apply any matching and ordering semantics. For a complete list of
          available relations, use `GET /relations`.
        type: string
        example: =
      description:
        description: |
          A description of this key that should define what the dimension is about and what possible values it can have.
          Alternatively this can be a URL to an accessible web page.
        type: string
        minLength: 1
        example: ISO 3166-1 alpha-2 country code, see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements
    required:
      - schema
      - relation
      - description
  KeyPage:
    type: object
    properties:
      keys:
        type: array
        items:
          $ref: '#/definitions/Key'
    required:
      - keys
  Key:
    type: object
    properties:
      id:
        description: The unique identifier for this key. It can be namespaced.
        $ref: '#/definitions/ID'
        readOnly: true
        example: tax-rate
      schema:
        description: The schema that applies to all values of this key.
        $ref: 'http://json-schema.org/schema#'
        example:
          type: number
          format: decimal
          min: 0.0
          max: 1.0
      description:
        type: string
        description: |
          A description of this key that should define what the key is about. Alternatively this can be a 
          URL to an accessible web page.
        minLength: 1
        example: Tax rate as a factor in the range [0,1].
    required:
      - schema
      - description
  ValuePage:
    type: object
    properties:
      values:
        type: array
        items:
          $ref: '#/definitions/Value'
  Value:
    type: object
    properties:
      dimensions:
        type: object
        # keys are dimension identifiers
        # values are typed according to the dimension's schema
        additionalProperties: true
        example:
          country: DE
          after: 2017-01-01T00:00:00
        default: {}
      value:
        description: |
          Actual value for this key and its dimensions. This may be of any type, i.e. everything from primitive values like boolean and integers to complex
          structures is possible. Although complex objects can usually be flattened with the use of custom dimensions very efficiently.
        example: 0.2
    required:
      - value
    example:
      dimensions:
        country: DE
        after: 2017-01-01T00:00:00
      value: 0.2