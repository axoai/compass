swagger: '2.0'
info:
  title: Compass API
  description: Configuration operations
  # TODO summary?!
  version: "0.1.0"
  contact:
    name: Pennybags
    url: https://github.com/zalando/compass
    email: team-pennybags@zalando.de
schemes:
  - https
tags:
  - name: dimension
    description: Dimension resources
  - name: config
    description: Config resources
paths:
  /dimensions:
    get:
      description: |
        Retrieves the complete list of all dimensions currently defined. This is usually used for display purposes.
        Dimensions are sorted by priority in descending order.
      produces:
        - application/x.compass.dimensions+json
        - application/problem+json
      responses:
        200:
          description: Dimensions found
          headers:
            ETag:
              type: string
            Last-Modified:
              type: string
              format: http-date
          schema:
            type: array
            items:
              $ref: '#/definitions/Dimension'
    put:
      # TODO description: used to sort dimension
      description: |
        Changes global priority of all dimensions at once.
      consumes:
        - application/x.compass.dimension-priorities+json
      produces:
        - application/problem+json
      parameters:
        - name: If-Match
          type: string
          in: header
        - name: If-Unmodified-Since
          type: string
          format: http-date
          in: header
      responses:
        200:
          description: Dimensions updated
          schema:
            type: array
            items:
              type: object
              title: DimensionRef
              properties:
                id:
                  type: string
              required: [id]
        # TODO missing response codes
        412:
          description: Precondition Failed
        428:
          description: Precondition Required
  /dimensions/{dimension-id}:
    get:
      responses:
        200:
          description: Dimension found
          schema:
            $ref: '#/definitions/Dimension'
    put:
      # TODO ETag support?
      responses:
        200:
          description: Dimension updated
        201:
          description: Dimension created
    delete:
      responses:
        204:
          description: Dimension deleted
          # TODO requires that this dimension is not used anywhere
          # TODO this may require DELETE /keys/*/values?foo (Note: no value = any value)
  /keys:
    get:
      responses:
        200:
          description: Keys
  /keys/{key-id}:
    get:
      responses:
        200:
          # TODO ETag
          # TODO Accept-Patch
          descripition: Key found
          schema:
            $ref: '#/definitions/Key'
    put:
      responses:
        200:
          description: Key updated
        201:
          description: Key created
    delete:
      responses:
        204:
          description: Key deleted
          # TODO define that this includes all values!!!
  /keys/{key-id-pattern}/values:
    # TODO filter by dimension (for every operation)
    get:
      responses:
        200:
          description: Values found
          schema:
            type: object
            additionalProperties:
              # keys are key identifiers
              type: array
              items:
                $ref: '#/definitions/Entry'
    post:
      responses:
        200:
          description: Values updated # TODO may include partial update + create
        201:
          descripition: Values created
    patch:
      responses:
        200:
          description: Values updated # TODO may include partial update, create or deletion
    delete:
      responses:
        204:
          description: Values deleted
definitions:
  Problem:
    type: object
    properties:
      type:
        type: string
        format: uri
        description: |
          An absolute URI that identifies the problem type.  When dereferenced, it SHOULD
          provide human-readable documentation for the problem type (e.g., using HTML).
        example: http://httpstatus.es/503
      title:
        type: string
        description: A short, human-readable summary of the problem type. It SHOULD NOT
        change from occurrence to occurrence of the problem, except for purposes of localisation.
        example: Service Unavailable
      status:
        type: integer
        format: int32
        description: |
          The HTTP status code generated by the origin server for this occurrence of the problem.
        example: 503
      detail:
        type: string
        description: |
          An human readable explanation specific to this occurrence of the problem.
        example: Connection to database timed out
      instance:
        type: string
        format: uri
        description: |
          An absolute URI that identifies the specific occurrence of the problem.
          It may or may not yield further information if dereferenced.
    required:
      - type
      - title
      - status
  Dimension:
    type: object
    properties:
      id:
        type: string
        description: The unique identifier for this dimension. It can be namespaced.
        example: country-code
      name:
        type: string
        description: The human readable version of this dimension's identifier. Usually this will be used for display reasons.
        example: Country
      description:
        type: string
        description: |
          A description of this key that should define what the dimension is about and what possible values it can have.
          Alternatively this can be a URL to an accessible web page.
        example: ISO 3166-1 alpha-2 country code
    required:
      - id
      - name
      - description
  Key:
    type: object
    properties:
      id:
        type: string
        description: The unique identifier for this key. It can be namespaced.
        pattern: ^([a-z0-9-]*\.)*[a-z0-9-]*$
        example: tax-rate
      name:
        type: string
        description: The human readable version of this key's identifier. Usually this will be used for display reasons.
        example: Tax Rate
      description:
        type: string
        description: A description of this key that should define what the key is about. Alternatively this can be a URL to an accessible web page.
        example: Tax rate as a factor in the range [0,1].
    required:
      - id
      - name
      - description
  Entry:
    properties:
      dimensions:
        type: object
        additionalProperties:
          # keys are dimension identifiers
          type: string
          example: DE
      value:
        type: object # TODO any!
        example: 0.19

