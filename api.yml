swagger: '2.0'
info:
  title: Compass
  description: 'Configuration Management API'
  version: "0.1.0"
  contact:
    name: Pennybags
    url: https://github.com/zalando/compass
    email: team-pennybags@zalando.de
schemes:
  - https
tags:
  - name: dimension
    description: Dimension resources
  - name: config
    description: Config resources
paths:
  /dimensions:
    get:
      description: |
        Retrieves the complete list of all dimensions currently defined. This is usually used for display purposes.
        Dimensions are sorted by priority in descending order.
      produces:
        - application/x.compass.dimensions+json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      responses:
        200:
          description: OK
          headers:
            ETag:
              type: string
            Last-Modified:
              type: string
              format: http-date
          schema:
            type: array
            items:
              $ref: '#/definitions/Dimension'
        301:
          description: Moved Permanently
        304:
          description: Not Modified
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/Not-Found'
        406:
          $ref: '#/responses/Not-Acceptable'
        500:
          $ref: '#/responses/Internal-Server-Error'
        503:
          $ref: '#/responses/Service-Unavailable'
    put:
      description: |
        Dimensions have one strict global ordering, i.e. every dimension is comparable to any other.
        To change the priority one needs to update all dimensions with an explicit ordering. Clients are free to use this for any kind of specific operation
        on top, e.g. swapping two dimensions, rotating or moving one dimension up or down the list.
      consumes:
        - application/x.compass.dimension-priorities+json
      produces:
        - application/problem+json
      parameters:
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
        - name: dimensions
          in: body
          schema:
            type: array
            items:
              type: object
              title: DimensionReference
              properties:
                id:
                  type: string
              required:
                - id
      responses:
        200:
          description: OK
        301:
          description: Moved Permanently
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/Not-Found'
        406:
          $ref: '#/responses/Not-Acceptable'
        412:
          $ref: '#/responses/Precondition-Failed'
        415:
          $ref: '#/responses/Unsupported-Media-Type'
        422:
          $ref: '#/responses/Unprocessable-Entity'
        428:
          $ref: '#/responses/Precondition-Required'
        500:
          $ref: '#/responses/Internal-Server-Error'
        503:
          $ref: '#/responses/Service-Unavailable'
  /dimensions/{dimension-id}:
    get:
      produces:
        - application/x.compass.dimension+json
      parameters:
        - $ref: '#/parameters/Dimension-Id'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      responses:
        200:
          description: OK
          headers:
            ETag:
              type: string
            Last-Modified:
              type: string
              format: http-date
          schema:
            $ref: '#/definitions/Dimension'
        301:
          description: Moved Permanently
        304:
          description: Not Modified
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/Not-Found'
        406:
          $ref: '#/responses/Not-Acceptable'
        500:
          $ref: '#/responses/Internal-Server-Error'
        503:
          $ref: '#/responses/Service-Unavailable'
    put:
      consumes:
        - application/x.compass.dimension+json
      produces:
        - application/x.compass.dimension+json
      parameters:
        - $ref: '#/parameters/Dimension-Id'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
        - $ref: '#/parameters/If-None-Match'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Dimension'
        201:
          description: Created
          headers:
            Content-Location:
              type: string
              format: uri
          schema:
            $ref: '#/definitions/Dimension'
        301:
          description: Moved Permanently
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/Not-Found'
        406:
          $ref: '#/responses/Not-Acceptable'
        412:
          $ref: '#/responses/Precondition-Failed'
        415:
          $ref: '#/responses/Unsupported-Media-Type'
        422:
          $ref: '#/responses/Unprocessable-Entity'
        428:
          $ref: '#/responses/Precondition-Required'
        500:
          $ref: '#/responses/Internal-Server-Error'
        503:
          $ref: '#/responses/Service-Unavailable'
    delete:
      parameters:
        - $ref: '#/parameters/Dimension-Id'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      responses:
        204:
          description: No Content
        301:
          description: Moved Permanently
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/Not-Found'
        412:
          $ref: '#/responses/Precondition-Failed'
        422:
          $ref: '#/responses/Unprocessable-Entity'
        428:
          $ref: '#/responses/Precondition-Required'
        500:
          $ref: '#/responses/Internal-Server-Error'
        503:
          $ref: '#/responses/Service-Unavailable'
  /keys:
    get:
      produces:
        - application/x.compass.keys+json
      parameters:
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      responses:
        200:
          description: OK
          headers:
            ETag:
              type: string
            Last-Modified:
              type: string
              format: http-date
          schema:
            type: array
            items:
              $ref: '#/definitions/Key'
        301:
          description: Moved Permanently
        304:
          description: Not Modified
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/Not-Found'
        406:
          $ref: '#/responses/Not-Acceptable'
        500:
          $ref: '#/responses/Internal-Server-Error'
        503:
          $ref: '#/responses/Service-Unavailable'
  /keys/{key-id}:
    get:
      produces:
        - application/x.compass.key+json
      parameters:
        - $ref: '#/parameters/Key-Id'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      responses:
        200:
          description: OK
          headers:
            ETag:
              type: string
            Last-Modified:
              type: string
              format: http-date
          schema:
            $ref: '#/definitions/Key'
        301:
          description: Moved Permanently
        304:
          description: Not Modified
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/Not-Found'
        406:
          $ref: '#/responses/Not-Acceptable'
        500:
          $ref: '#/responses/Internal-Server-Error'
        503:
          $ref: '#/responses/Service-Unavailable'
    put:
      consumes:
        - application/x.compass.key+json
      produces:
        - application/x.compass.key+json
      parameters:
        - $ref: '#/parameters/Key-Id'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
        - $ref: '#/parameters/If-None-Match'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Key'
        201:
          description: Created
          headers:
            Content-Location:
              type: string
              format: uri
          schema:
            $ref: '#/definitions/Key'
        301:
          description: Moved Permanently
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/Not-Found'
        406:
          $ref: '#/responses/Not-Acceptable'
        412:
          $ref: '#/responses/Precondition-Failed'
        415:
          $ref: '#/responses/Unsupported-Media-Type'
        422:
          $ref: '#/responses/Unprocessable-Entity'
        428:
          $ref: '#/responses/Precondition-Required'
        500:
          $ref: '#/responses/Internal-Server-Error'
        503:
          $ref: '#/responses/Service-Unavailable'
    delete:
      description: Deletes this key and **all** (!) of its values.
      parameters:
        - $ref: '#/parameters/Key-Id'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      responses:
        204:
          description: No Content
        301:
          description: Moved Permanently
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/Not-Found'
        412:
          $ref: '#/responses/Precondition-Failed'
        422:
          $ref: '#/responses/Unprocessable-Entity'
        428:
          $ref: '#/responses/Precondition-Required'
        500:
          $ref: '#/responses/Internal-Server-Error'
        503:
          $ref: '#/responses/Service-Unavailable'
  /keys/{key-pattern}/values:
    # TODO filter by dimension (for every operation)
    get:
      produces:
        - application/x.compass.values+json
      parameters:
        - $ref: '#/parameters/Key-Pattern'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      responses:
        200:
          headers:
            ETag:
              type: string
            Last-Modified:
              type: string
              format: http-date
            Accept-Patch:
              type: string
              format: media-type
          description: Values found
          schema:
            $ref: '#/definitions/Values'
        301:
          description: Moved Permanently
        304:
          description: Not Modified
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/Not-Found'
        406:
          $ref: '#/responses/Not-Acceptable'
        500:
          $ref: '#/responses/Internal-Server-Error'
        503:
          $ref: '#/responses/Service-Unavailable'
    post:
      parameters:
        - $ref: '#/parameters/Key-Pattern'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Values'
        201:
          description: Created
          schema:
            $ref: '#/definitions/Values'
        301:
          description: Moved Permanently
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/Not-Found'
        406:
          $ref: '#/responses/Not-Acceptable'
        412:
          $ref: '#/responses/Precondition-Failed'
        415:
          $ref: '#/responses/Unsupported-Media-Type'
        422:
          $ref: '#/responses/Unprocessable-Entity'
        428:
          $ref: '#/responses/Precondition-Required'
        500:
          $ref: '#/responses/Internal-Server-Error'
        503:
          $ref: '#/responses/Service-Unavailable'
    delete:
      parameters:
        - $ref: '#/parameters/Key-Pattern'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
        # TODO dynamic filter queries
      responses:
        204:
          description: No Content
        301:
          description: Moved Permanently
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/Not-Found'
        412:
          $ref: '#/responses/Precondition-Failed'
        422:
          $ref: '#/responses/Unprocessable-Entity'
        428:
          $ref: '#/responses/Precondition-Required'
        500:
          $ref: '#/responses/Internal-Server-Error'
        503:
          $ref: '#/responses/Service-Unavailable'
  /keys/*/values:
    # TODO does it make sense to allow this for the key-pattern variant?
    patch:
      consumes:
        - application/x.compass.values-patch+json
      responses:
        200:
          description: OK
        # TODO missing response codes
parameters:
  Dimension-Id:
    name: dimension-id
    in: path
    type: string
    required: true
  Key-Id:
    name: key-id
    in: path
    type: string
    required: true
  Key-Pattern:
    name: key-pattern
    in: path
    type: string
    description: |
      Wildcard key pattern, any asterisk will be used to match any substring, including the empty string. Wildcards can be used to fetch keys based on
      a common prefix (`billing.*`), suffix (`*.active`), both (`billing.*.active`) or infix (`*.job.*`). Wildcards can also be used for partial
      namespaces, e.g. `billing.*Job.active` will match `billing.ReportJob.active` and `billing.SalaryJob.active`.

      A special value is a single asterisk `*`, which will return all keys. This is the preferred way for *fat* client to bulk-fetch the whole
      configuration usually asynchronously to reduce roundtrips and response latency.
    required: true
  If-None-Match:
    name: If-None-Match
    in: header
    type: string
  If-Modified-Since:
    name: If-Modified-Since
    in: header
    type: string
    format: http-date
  If-Match:
    name: If-Match
    in: header
    type: string
  If-Unmodified-Since:
    name: If-Unmodified-Since
    in: header
    type: string
    format: http-date
responses:
  Unauthorized:
    description: Unauthorized
    schema:
      $ref: '#/definitions/Problem'
  Forbidden:
    description: Forbidden
    schema:
      $ref: '#/definitions/Problem'
  Not-Found:
    description: Not Found
    schema:
      $ref: '#/definitions/Problem'
  Not-Acceptable:
    description: Not Acceptable
    schema:
      $ref: '#/definitions/Problem'
  Precondition-Failed:
    description: Precondition Failed
    schema:
      $ref: '#/definitions/Problem'
  Unsupported-Media-Type:
    description: Unsupported Media Type
    schema:
      $ref: '#/definitions/Problem'
  Unprocessable-Entity:
    description: Unprocessable Entity
    schema:
      $ref: '#/definitions/Problem'
  Precondition-Required:
    description: Precondition Required
    schema:
      $ref: '#/definitions/Problem'
  Internal-Server-Error:
    description: Internal Server Error
    schema:
      $ref: '#/definitions/Problem'
  Service-Unavailable:
    description: Service Unavailable
    headers:
      Retry-After:
        type: integer
        format: int32
    schema:
      $ref: '#/definitions/Problem'
definitions:
  Problem:
    type: object
    properties:
      type:
        type: string
        format: uri
        description: |
          An absolute URI that identifies the problem type.  When dereferenced, it SHOULD
          provide human-readable documentation for the problem type (e.g., using HTML).
        example: http://httpstatus.es/503
      title:
        type: string
        description: |
          A short, human-readable summary of the problem type. It SHOULD NOT
          change from occurrence to occurrence of the problem, except for purposes of localisation.
        example: Service Unavailable
      status:
        type: integer
        format: int32
        description: |
          The HTTP status code generated by the origin server for this occurrence of the problem.
        example: 503
      detail:
        type: string
        description: |
          An human readable explanation specific to this occurrence of the problem.
        example: Connection to database timed out
      instance:
        type: string
        format: uri
        description: |
          An absolute URI that identifies the specific occurrence of the problem.
          It may or may not yield further information if dereferenced.
    required:
      - type
      - title
      - status
  Dimension:
    type: object
    properties:
      id:
        type: string
        description: The unique identifier for this dimension. It can be namespaced.
        # TODO pattern? ^[a-z0-9-]+$
        example: country
      type:
        type: string
        description: |
          Identifies the underlying dimension type. Most of the time this will be *identity*, which matches based on
          value identity. Another common one is *pattern* which support regex matches.
        enum:
          - identity
          - pattern
          - temporal-after
          - temporal-before
        example: identity
      name:
        type: string
        description: The human readable version of this dimension's identifier. Usually this will be used for display reasons.
        example: Country
      description:
        type: string
        description: |
          A description of this key that should define what the dimension is about and what possible values it can have.
          Alternatively this can be a URL to an accessible web page.
        example: ISO 3166-1 alpha-2 country code, see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements
    required:
      - id
      - name
      - description
  Key:
    type: object
    properties:
      id:
        type: string
        description: The unique identifier for this key. It can be namespaced.
        pattern: ^([a-z0-9-]*\.)*[a-z0-9-]+$ # TODO is that even allowed here?
        example: tax-rate
      name:
        type: string
        description: The human readable version of this key's identifier. Usually this will be used for display reasons.
        example: Tax Rate
      description:
        type: string
        description: |
          A description of this key that should define what the key is about. Alternatively this can be a 
          URL to an accessible web page.
        example: Tax rate as a factor in the range [0,1].
    required:
      - id
      - name
      - description
  Values:
    type: object
    additionalProperties:
      # keys are key identifiers
      type: array
      items:
        $ref: '#/definitions/Entry'
    example:
      tax-rate:
        - dimensions:
            country: DE
          value: 0.19
        - dimensions:
            country: DE
            postal-code: 27498
          value: 0
      refund.url:
        - dimensions:
            region: eu-west-1
          value: http://example.co.uk/refunds
        - dimensions:
            region: eu-central-1
          value: http://example.de/refunds
  Entry:
    properties:
      dimensions:
        type: object
        additionalProperties:
          # keys are dimension identifiers
          type: string
          example: DE
      value:
        type: object # TODO any
        example: 0.19
    required:
      - value
    example:
      dimensions:
        country: DE
        after: 2017-01-01T00:00:00
      value: 0.2